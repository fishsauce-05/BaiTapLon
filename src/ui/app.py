import streamlit as st
import requests
import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import numpy as np
import os
import sys

# Th√™m ƒë∆∞·ªùng d·∫´n c·ªßa th∆∞ m·ª•c cha v√†o sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

# C·∫•u h√¨nh Streamlit
st.set_page_config(
    page_title="H·ªá th·ªëng ph√¢n lo·∫°i review",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL c·ªßa API
API_URL = "http://localhost:5000/predict"

# H√†m g·ªçi API ƒë·ªÉ d·ª± ƒëo√°n
def predict_review(review_text):
    try:
        response = requests.post(
            API_URL,
            json={"review": review_text},
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"L·ªói t·ª´ API (HTTP {response.status_code}): {response.text}")
            return None
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi ƒë·∫øn API: {str(e)}")
        return None

# H√†m t·∫°o bi·ªÉu ƒë·ªì t·ª´ d·ªØ li·ªáu EDA
def load_and_display_eda():
    try:
        # T·∫£i d·ªØ li·ªáu EDA (thay b·∫±ng ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø)
        eda_data_path = "../../data/processed/eda_data.csv"
        
        # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(eda_data_path):
            st.warning("D·ªØ li·ªáu EDA kh√¥ng c√≥ s·∫µn. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u thay th·∫ø.")
            # T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ demo
            df = pd.DataFrame({
                "length": np.random.normal(100, 30, 1000),
                "sentiment": np.random.choice(["T√≠ch c·ª±c", "Ti√™u c·ª±c"], 1000, p=[0.7, 0.3])
            })
        else:
            df = pd.read_csv(eda_data_path)
        
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë ƒë·ªô d√†i review
        fig_length = px.histogram(
            df, 
            x="length", 
            title="Ph√¢n b·ªë ƒë·ªô d√†i review",
            labels={"length": "ƒê·ªô d√†i review (k√Ω t·ª±)", "count": "S·ªë l∆∞·ª£ng"},
            color_discrete_sequence=["#3498db"]
        )
        st.plotly_chart(fig_length, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë nh√£n
        if "sentiment" in df.columns:
            sentiment_counts = df["sentiment"].value_counts().reset_index()
            sentiment_counts.columns = ["Sentiment", "Count"]
            
            fig_sentiment = px.pie(
                sentiment_counts, 
                values="Count", 
                names="Sentiment",
                title="Ph√¢n b·ªë nh√£n sentiment",
                color_discrete_sequence=["#2ecc71", "#e74c3c"]
            )
            st.plotly_chart(fig_sentiment, use_container_width=True)
        
        # V·∫Ω word cloud n·∫øu c√≥ d·ªØ li·ªáu
        if "tokens" in df.columns and "sentiment" in df.columns:
            st.subheader("Word Cloud theo lo·∫°i review")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Word cloud cho review t√≠ch c·ª±c
                positive_tokens = " ".join(df[df["sentiment"] == "T√≠ch c·ª±c"]["tokens"].astype(str))
                if positive_tokens:
                    wordcloud_positive = WordCloud(
                        width=800, height=400, 
                        background_color="white", 
                        max_words=100,
                        colormap="viridis"
                    ).generate(positive_tokens)
                    
                    fig_pos, ax_pos = plt.subplots(figsize=(10, 5))
                    ax_pos.imshow(wordcloud_positive, interpolation='bilinear')
                    ax_pos.axis("off")
                    ax_pos.set_title("T·ª´ kh√≥a ph·ªï bi·∫øn trong review t√≠ch c·ª±c")
                    st.pyplot(fig_pos)
            
            with col2:
                # Word cloud cho review ti√™u c·ª±c
                negative_tokens = " ".join(df[df["sentiment"] == "Ti√™u c·ª±c"]["tokens"].astype(str))
                if negative_tokens:
                    wordcloud_negative = WordCloud(
                        width=800, height=400, 
                        background_color="white", 
                        max_words=100,
                        colormap="magma"
                    ).generate(negative_tokens)
                    
                    fig_neg, ax_neg = plt.subplots(figsize=(10, 5))
                    ax_neg.imshow(wordcloud_negative, interpolation='bilinear')
                    ax_neg.axis("off")
                    ax_neg.set_title("T·ª´ kh√≥a ph·ªï bi·∫øn trong review ti√™u c·ª±c")
                    st.pyplot(fig_neg)
    
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu EDA: {str(e)}")

# Giao di·ªán Streamlit
def main():
    st.title("üîç H·ªá Th·ªëng Ph√¢n Lo·∫°i Review")
    
    # Sidebar cho c√°c t√πy ch·ªçn
    st.sidebar.title("T√πy ch·ªçn")
    
    # Option ƒë·ªÉ hi·ªÉn th·ªã dashboard
    show_dashboard = st.sidebar.checkbox("Hi·ªÉn th·ªã dashboard EDA", value=True)
    
    # Tab cho c√°c ch·ª©c nƒÉng kh√°c nhau
    tab1, tab2 = st.tabs(["Ph√¢n lo·∫°i Review", "Th√¥ng tin d·ª± √°n"])
    
    with tab1:
        # Chia layout th√†nh 2 c·ªôt
        col1, col2 = st.columns([3, 2])
        
        with col1:
            st.subheader("üìù Nh·∫≠p review c·ªßa b·∫°n")
            review_input = st.text_area(
                "Nh·∫≠p n·ªôi dung review:",
                height=200,
                placeholder="Nh·∫≠p review s·∫£n ph·∫©m c·ªßa b·∫°n ·ªü ƒë√¢y...",
            )
            
            # N√∫t submit v·ªõi loading spinner
            if st.button("Ph√¢n lo·∫°i review", type="primary"):
                if review_input:
                    with st.spinner("ƒêang ph√¢n t√≠ch review..."):
                        result = predict_review(review_input)
                    
                    if result and "label" in result:
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        st.success("‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t!")
                        
                        # T·∫°o container v·ªõi border
                        with st.container():
                            st.markdown("""
                            <style>
                            .result-container {
                                border-radius: 10px;
                                padding: 20px;
                                background-color: #f8f9fa;
                                margin-bottom: 20px;
                            }
                            </style>
                            """, unsafe_allow_html=True)
                            
                            st.markdown('<div class="result-container">', unsafe_allow_html=True)
                            
                            # Hi·ªÉn th·ªã nh√£n v√† ƒë·ªô tin c·∫≠y
                            st.subheader("K·∫øt qu·∫£ ph√¢n lo·∫°i:")
                            
                            # M√†u kh√°c nhau cho c√°c nh√£n
                            if result["label"] == "T√≠ch c·ª±c":
                                label_color = "#2ecc71"  # Xanh l√° cho t√≠ch c·ª±c
                            else:
                                label_color = "#e74c3c"  # ƒê·ªè cho ti√™u c·ª±c
                                
                            st.markdown(f"<h3 style='color: {label_color};'>Nh√£n: {result['label']}</h3>", unsafe_allow_html=True)
                            
                            # Hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y b·∫±ng progress bar
                            st.markdown(f"**ƒê·ªô tin c·∫≠y:** {result['confidence']:.2%}")
                            st.progress(result["confidence"])
                            
                            # Th√¥ng tin th√™m v·ªÅ th·ªùi gian x·ª≠ l√Ω
                            if "processing_time" in result:
                                st.markdown(f"**Th·ªùi gian x·ª≠ l√Ω:** {result['processing_time']:.3f} gi√¢y")
                                
                            st.markdown('</div>', unsafe_allow_html=True)
                else:
                    st.warning("Vui l√≤ng nh·∫≠p review tr∆∞·ªõc khi ph√¢n lo·∫°i.")
        
        with col2:
            st.subheader("üí° Review m·∫´u")
            st.markdown("""
            **B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c review m·∫´u sau:**
            
            **Review t√≠ch c·ª±c:**
            ```
            S·∫£n ph·∫©m tuy·ªát v·ªùi, ƒë√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh. Ch·∫•t l∆∞·ª£ng v∆∞·ª£t tr·ªôi so v·ªõi gi√° ti·ªÅn. R·∫•t h√†i l√≤ng v·ªõi tr·∫£i nghi·ªám mua h√†ng n√†y!
            ```
            
            **Review ti√™u c·ª±c:**
            ```
            Th·∫•t v·ªçng v·ªõi s·∫£n ph·∫©m n√†y. H√†ng k√©m ch·∫•t l∆∞·ª£ng, kh√¥ng nh∆∞ m√¥ t·∫£. ƒê√£ li√™n h·ªá v·ªõi shop nhi·ªÅu l·∫ßn nh∆∞ng kh√¥ng ƒë∆∞·ª£c ph·∫£n h·ªìi. S·∫Ω kh√¥ng mua l·∫°i.
            ```
            """)
            
            # Th√™m c√°c n√∫t ƒë·ªÉ ch√®n review m·∫´u
            if st.button("Ch√®n review t√≠ch c·ª±c m·∫´u"):
                st.session_state.review_example = "S·∫£n ph·∫©m tuy·ªát v·ªùi, ƒë√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh. Ch·∫•t l∆∞·ª£ng v∆∞·ª£t tr·ªôi so v·ªõi gi√° ti·ªÅn. R·∫•t h√†i l√≤ng v·ªõi tr·∫£i nghi·ªám mua h√†ng n√†y!"
                st.rerun()
                
            if st.button("Ch√®n review ti√™u c·ª±c m·∫´u"):
                st.session_state.review_example = "Th·∫•t v·ªçng v·ªõi s·∫£n ph·∫©m n√†y. H√†ng k√©m ch·∫•t l∆∞·ª£ng, kh√¥ng nh∆∞ m√¥ t·∫£. ƒê√£ li√™n h·ªá v·ªõi shop nhi·ªÅu l·∫ßn nh∆∞ng kh√¥ng ƒë∆∞·ª£c ph·∫£n h·ªìi. S·∫Ω kh√¥ng mua l·∫°i."
                st.rerun()
    
    # Dashboard EDA
    if show_dashboard:
        st.markdown("---")
        st.header("üìä Dashboard Ph√¢n T√≠ch D·ªØ Li·ªáu")
        load_and_display_eda()
    
    with tab2:
        st.header("üìã Th√¥ng tin v·ªÅ d·ª± √°n")
        st.markdown("""
        ### Gi·ªõi thi·ªáu
        D·ª± √°n n√†y l√† m·ªôt h·ªá th·ªëng ph√¢n lo·∫°i review s·∫£n ph·∫©m s·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t X·ª≠ l√Ω Ng√¥n ng·ªØ T·ª± nhi√™n (NLP) v√† H·ªçc m√°y (Machine Learning).
        
        ### C√°c th√†nh ph·∫ßn ch√≠nh
        1. **Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu:** L√†m s·∫°ch v√† tokenize d·ªØ li·ªáu review.
        2. **M√¥ h√¨nh ph√¢n lo·∫°i:** S·ª≠ d·ª•ng c√°c thu·∫≠t to√°n h·ªçc m√°y ƒë·ªÉ ph√¢n lo·∫°i sentiment c·ªßa review.
        3. **API Backend:** API RESTful x·ª≠ l√Ω d·ªØ li·ªáu v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d·ª± ƒëo√°n.
        4. **Giao di·ªán ng∆∞·ªùi d√πng:** Frontend t∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi d√πng, hi·ªÉn th·ªã k·∫øt qu·∫£ v√† dashboard.
        
        ### C√¥ng ngh·ªá s·ª≠ d·ª•ng
        - **Backend:** Flask/FastAPI, Scikit-learn
        - **Frontend:** Streamlit
        - **Ph√¢n t√≠ch d·ªØ li·ªáu:** Pandas, NumPy, Matplotlib, Plotly
        - **Deploy:** Heroku/Streamlit Sharing
        
        ### T√°c gi·∫£
        Nh√≥m sinh vi√™n th·ª±c hi·ªán ƒë·ªì √°n m√¥n h·ªçc.
        """)

# Ki·ªÉm tra xem c√≥ review m·∫´u trong session state kh√¥ng
if "review_example" in st.session_state:
    review_input = st.session_state.review_example
    # X√≥a session state ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
    del st.session_state.review_example

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main()